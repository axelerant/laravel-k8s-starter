apiVersion: {{ template "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ template "fullname" . }}-phpfpm
  labels:
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
spec:
  selector:
    matchLabels:
      app: {{ template "fullname" . }}-phpfpm
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}-phpfpm
    spec:
      initContainers:
          - args:
            - /bin/bash
            - -c
            - (php artisan migrate) &&
              (php artisan config:cache) &&
              (php artisan route:cache) &&
              (cp -r /var/www/html/. /code)
            env:
              - name: DB_PORT
                value: "3306"
              - name: DB_DATABASE
                value: {{ .Values.dbName | trim }}
              - name: DB_USERNAME
                value: {{ .Values.dbUser | trim }}
              - name: DB_PASSWORD
                value: {{ .Values.dbPassword | trim }}
              - name: DB_HOST
                value: "{{ template "fullname" . }}-db"
            image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
            imagePullPolicy: {{ .Values.image.pullPolicy }}
            name: {{ template "fullname" . }}-app-migration
            volumeMounts:
                - mountPath: /code
                  name: code
      containers:
        - name: {{ template "fullname" . }}-phpfpm
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: DB_PORT
              value: "3306"
            - name: DB_DATABASE
              value: {{ .Values.dbName | trim }}
            - name: DB_USERNAME
              value: {{ .Values.dbUser | trim }}
            - name: DB_PASSWORD
              value: {{ .Values.dbPassword | trim }}
            - name: DB_HOST
              value: "{{ template "fullname" . }}-db"
            - name: API_KEY
              value: {{ .Values.apiKey | trim }}
          ports:
            - containerPort: {{ .Values.phpfpmService.phpfpmPort }}
          resources:
{{ .Values.resourcesphpfpm | toYaml | trim | indent 12 }}
          readinessProbe:
            tcpSocket:
              port: {{ .Values.phpfpmService.phpfpmPort }}
            initialDelaySeconds: 10
            timeoutSeconds: 5
          volumeMounts:
            - name: code
              mountPath: /code
      volumes:
        - name: code
          persistentVolumeClaim:
            claimName: code
---
apiVersion: {{ template "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ template "fullname" . }}-nginx
  labels:
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
spec:
  selector:
    matchLabels:
      app: {{ template "fullname" . }}-nginx
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}-nginx
    spec:
      containers:
          - name: {{ template "fullname" . }}-nginx
            image: "{{ .Values.nginximage.repository }}:{{ .Values.nginximage.tag }}"
            imagePullPolicy: {{ .Values.nginximage.pullPolicy }}
            ports:
              - name: http
                containerPort: {{ .Values.nginxService.internalPort }}
              - name: https
                containerPort: 8443
            resources:
{{ .Values.resourcesnginx | toYaml | indent 14 }}
            livenessProbe:
              httpGet:
                path: /
                port: http
              initialDelaySeconds: 30
              timeoutSeconds: 5
            readinessProbe:
              httpGet:
                path: /
                port: http
              initialDelaySeconds: 5
              timeoutSeconds: 1
            volumeMounts:
              - name: nginx-config
                mountPath: /opt/bitnami/nginx/conf/server_blocks
              - name: code
                mountPath: /code
      volumes:
        - name: nginx-config
          configMap:
            name: {{ template "fullname" . }}
        - name: code
          persistentVolumeClaim:
            claimName: code
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}-db
  labels:
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
spec:
  selector:
    matchLabels:
      app: {{ template "fullname" . }}-db
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}-db
    spec:
      containers:
          - image: "{{ .Values.dbImage.repository }}:{{ .Values.dbImage.tag }}"
            name: {{ template "fullname" . }}-db
            imagePullPolicy: {{ .Values.dbImage.pullPolicy }}
            env:
              - name: MYSQL_ROOT_PASSWORD
                value: {{ .Values.dbRootPassword | trim }}
              - name: MYSQL_DATABASE
                value: {{ .Values.dbName | trim }}
              - name: MYSQL_USER
                value: {{ .Values.dbUser | trim }}
              - name: MYSQL_PASSWORD
                value: {{ .Values.dbPassword }}
              - name: MYSQL_ALLOW_EMPTY_PASSWORD
                value: "1"
            ports:
              - containerPort: {{ .Values.dbService.port }}
                name: {{ template "fullname" . }}-db
            readinessProbe:
              exec:
                command:
                  - bash
                  - "-c"
                  - |
                    mysqladmin -uroot -p$MYSQL_ROOT_PASSWORD ping &> /dev/null
              initialDelaySeconds: 10
              timeoutSeconds: 5
            volumeMounts:
              - name: {{ template "fullname" . }}-db
                mountPath: /var/lib/mysql
            resources:
{{ .Values.resourcesdb | toYaml | trim | indent 14 }}
      volumes:
        - name: {{ template "fullname" . }}-db
          persistentVolumeClaim:
            claimName: {{ template "fullname" . }}-db
